{
    "tsconfig.json": "{\n    \"compileOnSave\": false,\n    \"compilerOptions\": {\n        \"baseUrl\": \"./\",\n        \"outDir\": \"./dist/out-tsc\",\n        \"sourceMap\": true,\n        \"declaration\": false,\n        \"module\": \"es2015\",\n        \"moduleResolution\": \"node\",\n        \"experimentalDecorators\": true,\n        \"target\": \"es2022\",\n        \"typeRoots\": [\"node_modules/@types\"],\n        \"lib\": [\"es2018\", \"dom\"]\n    }\n}\n",
    "stackblitz.md": "This directory contains the Angular CLI project files used in the StackBlitz. For the most part, you should not need to edit files in this directory.\n\nTwo exceptions worth noting:\n- `styles.scss` contains global styles for the examples, there may be occasions to add these\n- `package.json` tweak this if it is determined that a particular third-party library should be preoloaded for a stackblitz example\n\nFor more detail on working with examples, see https://cashmere.healthcatalyst.net/guides/working-with-examples.\n",
    "package.json": "{\n  \"name\": \"project-template\",\n  \"version\": \"0.0.0\",\n  \"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"ng serve\",\n    \"build\": \"ng build\",\n    \"test\": \"ng test\",\n    \"lint\": \"ng lint\",\n    \"e2e\": \"ng e2e\"\n  },\n  \"private\": true,\n  \"dependencies\": {\n    \"@angular/animations\": \"^18.2.13\",\n    \"@angular/cdk\": \"^18.2.4\",\n    \"@angular/common\": \"^18.2.13\",\n    \"@angular/compiler\": \"^18.2.13\",\n    \"@angular/core\": \"^18.2.13\",\n    \"@angular/forms\": \"^18.2.13\",\n    \"@angular/platform-browser\": \"^18.2.13\",\n    \"@angular/platform-browser-dynamic\": \"^18.2.13\",\n    \"@angular/platform-server\": \"18.2.13\",\n    \"@angular/router\": \"^18.2.13\",\n    \"@ng-select/ng-select\": \"^13.9.1\",\n    \"@angular-slider/ngx-slider\": \"^18.0.0\",\n    \"core-js\": \"^2.5.4\",\n    \"rxjs\": \"^6.6.0\",\n    \"zone.js\": \"~0.15.0\",\n    \"@healthcatalyst/cashmere\": \"*\",\n    \"notosans-fontface\": \"^1.3.0\",\n    \"@fortawesome/fontawesome-free\": \"^6.7.2\",\n    \"sugar\": \"^2.0.6\",\n    \"lodash\": \"^4.17.21\"\n  },\n  \"devDependencies\": {\n    \"@angular-devkit/build-angular\": \"^18.2.15\",\n    \"@angular/cli\": \"^18.2.15\",\n    \"@angular/compiler-cli\": \"^18.2.13\",\n    \"@angular/language-service\": \"18.2.13\",\n    \"@types/node\": \"^18.14.4\",\n    \"@types/jasmine\": \"~3.8.0\",\n    \"@types/jasminewd2\": \"~2.0.2\",\n    \"codelyzer\": \"^6.0.0\",\n    \"jasmine-core\": \"~3.8.0\",\n    \"jasmine-spec-reporter\": \"~5.0.0\",\n    \"karma\": \"~6.3.16\",\n    \"karma-chrome-launcher\": \"~3.1.0\",\n    \"karma-coverage-istanbul-reporter\": \"~3.0.2\",\n    \"karma-jasmine\": \"~4.0.0\",\n    \"karma-jasmine-html-reporter\": \"^1.5.0\",\n    \"protractor\": \"~5.4.0\",\n    \"ts-node\": \"6.1.7\",\n    \"tslint\": \"~6.1.0\",\n    \"typescript\": \"~5.4.5\"\n  }\n}\n",
    "angular.json": "{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n        \"project-template\": {\n            \"root\": \"\",\n            \"sourceRoot\": \"src\",\n            \"projectType\": \"application\",\n            \"prefix\": \"app\",\n            \"schematics\": {\n                \"@schematics/angular:component\": {\n                    \"styleext\": \"scss\"\n                }\n            },\n            \"architect\": {\n                \"build\": {\n                    \"builder\": \"@angular-devkit/build-angular:browser\",\n                    \"options\": {\n                        \"outputPath\": \"dist/project-template\",\n                        \"index\": \"src/index.html\",\n                        \"main\": \"src/main.ts\",\n                        \"polyfills\": \"src/polyfills.ts\",\n                        \"tsConfig\": \"src/tsconfig.app.json\",\n                        \"assets\": [\"src/favicon.ico\", \"src/assets\"],\n                        \"styles\": [\"src/styles.scss\"]\n                    },\n                    \"configurations\": {\n                        \"production\": {\n                            \"fileReplacements\": [\n                                {\n                                    \"replace\": \"src/environments/environment.ts\",\n                                    \"with\": \"src/environments/environment.prod.ts\"\n                                }\n                            ],\n                            \"optimization\": true,\n                            \"outputHashing\": \"all\",\n                            \"sourceMap\": false,\n                            \"extractCss\": true,\n                            \"namedChunks\": false,\n                            \"aot\": true,\n                            \"extractLicenses\": true,\n                            \"vendorChunk\": false,\n                            \"buildOptimizer\": true,\n                            \"budgets\": [\n                                {\n                                    \"type\": \"initial\",\n                                    \"maximumWarning\": \"2mb\",\n                                    \"maximumError\": \"5mb\"\n                                }\n                            ]\n                        }\n                    }\n                },\n                \"serve\": {\n                    \"builder\": \"@angular-devkit/build-angular:dev-server\",\n                    \"options\": {\n                        \"browserTarget\": \"project-template:build\"\n                    },\n                    \"configurations\": {\n                        \"production\": {\n                            \"browserTarget\": \"project-template:build:production\"\n                        }\n                    }\n                },\n                \"extract-i18n\": {\n                    \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n                    \"options\": {\n                        \"browserTarget\": \"project-template:build\"\n                    }\n                },\n                \"test\": {\n                    \"builder\": \"@angular-devkit/build-angular:karma\",\n                    \"options\": {\n                        \"main\": \"src/test.ts\",\n                        \"polyfills\": \"src/polyfills.ts\",\n                        \"tsConfig\": \"src/tsconfig.spec.json\",\n                        \"karmaConfig\": \"src/karma.conf.js\",\n                        \"styles\": [\"src/styles.scss\"],\n                        \"scripts\": [],\n                        \"assets\": [\"src/favicon.ico\", \"src/assets\"]\n                    }\n                },\n                \"lint\": {\n                    \"builder\": \"@angular-devkit/build-angular:tslint\",\n                    \"options\": {\n                        \"tsConfig\": [\"src/tsconfig.app.json\", \"src/tsconfig.spec.json\"],\n                        \"exclude\": [\"**/node_modules/**\"]\n                    }\n                }\n            }\n        },\n        \"project-template-e2e\": {\n            \"root\": \"e2e/\",\n            \"projectType\": \"application\",\n            \"prefix\": \"\",\n            \"architect\": {\n                \"e2e\": {\n                    \"builder\": \"@angular-devkit/build-angular:protractor\",\n                    \"options\": {\n                        \"protractorConfig\": \"e2e/protractor.conf.js\",\n                        \"devServerTarget\": \"project-template:serve\"\n                    },\n                    \"configurations\": {\n                        \"production\": {\n                            \"devServerTarget\": \"project-template:serve:production\"\n                        }\n                    }\n                },\n                \"lint\": {\n                    \"builder\": \"@angular-devkit/build-angular:tslint\",\n                    \"options\": {\n                        \"tsConfig\": \"e2e/tsconfig.e2e.json\",\n                        \"exclude\": [\"**/node_modules/**\"]\n                    }\n                }\n            }\n        }\n    },\n    \"defaultProject\": \"project-template\"\n}\n",
    "src/tsconfig.app.json": "{\n    \"extends\": \"../tsconfig.json\",\n    \"compilerOptions\": {\n        \"outDir\": \"../out-tsc/app\",\n        \"types\": []\n    },\n    \"exclude\": [\"test.ts\", \"**/*.spec.ts\"]\n}\n",
    "src/styles.scss": "$fa-font-path: '../webfonts';\n@import '~@fortawesome/fontawesome-free/scss/fontawesome';\n@import '~@fortawesome/fontawesome-free/scss/regular';\n@import '~@fortawesome/fontawesome-free/scss/solid';\n@import '~@fortawesome/fontawesome-free/scss/brands';\n\n$notosans-fontface-path: \"node_modules/notosans-fontface/fonts\";\n@import \"~notosans-fontface/scss/notosans-fontface-allweight\";\n\n$hc-icons-font-path: 'node_modules/@healthcatalyst/cashmere/hcicons';\n@import '@healthcatalyst/cashmere/hcicons2/hcicons2';\n\n@import '@healthcatalyst/cashmere/scss/cashmere';\n\n// global styles for stackblitz examples\n.demo-button {\n    margin-top: 10px !important;\n    margin-right: 10px !important;\n}\n\nhc-example-viewer .hc-tab-content-horizontal {\n    padding: 3px;\n}\n\n.pipe-output {\n    font-weight: 600px;\n    font-size: 22px;\n}\n",
    "src/polyfills.ts": "/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/guide/browser-support\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/**\n * IE11 requires the following for NgClass support on SVG elements\n */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n */\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n * because those flags need to be set before `zone.js` being loaded, and webpack\n * will put import in the top of bundle, so user need to create a separate file\n * in this directory (for example: zone-flags.ts), and put the following flags\n * into that file, and then add the following code before importing zone.js.\n * import './zone-flags';\n *\n * The flags allowed in zone-flags.ts are listed here.\n *\n * The following flags will work for all browsers.\n *\n * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n *\n *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n *  with the following flag, it will bypass `zone.js` patch for IE/Edge\n *\n *  (window as any).__Zone_enable_cross_context_check = true;\n *\n */\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\n import 'zone.js';  // Included with Angular CLI.\n\n\n /***************************************************************************************************\n  * APPLICATION IMPORTS\n  */\n",
    "src/main.ts": "import {enableProdMode} from '@angular/core';\nimport {platformBrowserDynamic} from '@angular/platform-browser-dynamic';\n\nimport {AppModule} from './app/app.module';\nimport {environment} from './environments/environment';\n\nif (environment.production) {\n    enableProdMode();\n}\n\nplatformBrowserDynamic()\n    .bootstrapModule(AppModule)\n    .catch(err => console.error(err));\n",
    "src/index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>ProjectTemplate</title>\n  <base href=\"/\">\n\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n</head>\n<body>\n  <app-root></app-root>\n</body>\n</html>\n",
    "src/environments/environment.ts": "// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n    production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\n",
    "src/environments/environment.prod.ts": "export const environment = {\n    production: true\n};\n",
    "src/assets/.gitkeep": "",
    "src/app/example-container.component.ts": "/* eslint-disable @angular-eslint/component-selector */\nimport {Component} from '@angular/core';\n\n@Component({\n    selector: 'app-example-container',\n    template: '<hc-example></hc-example>',\n    standalone: false\n})\nexport class ExampleContainerComponent {}\n",
    "src/app/cashmere.module.ts": "import {NgModule} from '@angular/core';\nimport {\n    AccordionModule,\n    AppSwitcherModule,\n    BreadcrumbsModule,\n    BannerModule,\n    ButtonModule,\n    ButtonToggleModule,\n    CheckboxModule,\n    ChipModule,\n    ColumnMenuModule,\n    DatepickerModule,\n    DateRangeModule,\n    DrawerModule,\n    DragListModule,\n    EnvSwitcherModule,\n    FormFieldModule,\n    IconModule,\n    InputModule,\n    InstanceSwitcherModule,\n    ListModule,\n    MeasurableModule,\n    ModalModule,\n    ReleaseNotesModalModule,\n    MultiselectModule,\n    NavbarModule,\n    FileUploaderModule,\n    PaginationModule,\n    PicklistOldModule,\n    PicklistModule,\n    PipesModule,\n    PopModule,\n    ProgressIndicatorsModule,\n    RadioButtonModule,\n    ResizableModule,\n    ScrollNavModule,\n    SearchBarModule,\n    SelectModule,\n    SidenavModule,\n    SortModule,\n    SliderModule,\n    SlideToggleModule,\n    StepperModule,\n    SubnavModule,\n    TabsModule,\n    TableModule,\n    TileModule,\n    ToasterModule,\n    TypeformSurveyModule\n} from '@healthcatalyst/cashmere';\n\n@NgModule({\n    exports: [\n        AccordionModule,\n        AppSwitcherModule,\n        BreadcrumbsModule,\n        BannerModule,\n        ButtonModule,\n        ButtonToggleModule,\n        CheckboxModule,\n        ChipModule,\n        ColumnMenuModule,\n        DatepickerModule,\n        DateRangeModule,\n        DrawerModule,\n        DragListModule,\n        EnvSwitcherModule,\n        FormFieldModule,\n        IconModule,\n        InputModule,\n        InstanceSwitcherModule,\n        ListModule,\n        MeasurableModule,\n        ModalModule,\n        ReleaseNotesModalModule,\n        MultiselectModule,\n        FileUploaderModule,\n        NavbarModule,\n        PaginationModule,\n        PicklistOldModule,\n        PicklistModule,\n        PipesModule,\n        PopModule,\n        ProgressIndicatorsModule,\n        RadioButtonModule,\n        ResizableModule,\n        ScrollNavModule,\n        SearchBarModule,\n        SelectModule,\n        SortModule,\n        SidenavModule,\n        SliderModule,\n        SlideToggleModule,\n        StepperModule,\n        SubnavModule,\n        TableModule,\n        TabsModule,\n        TileModule,\n        ToasterModule,\n        TypeformSurveyModule\n    ]\n})\nexport class CashmereModule {}\n",
    "src/app/app.module.ts": "import {BrowserModule} from '@angular/platform-browser';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {NgModule} from '@angular/core';\n\nimport {AppRoutingModule} from './app-routing.module';\nimport {AppComponent} from './app.component';\nimport {ExampleContainerComponent} from './example-container.component';\nimport {CashmereModule} from './cashmere.module';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {ToasterOverviewExampleModule} from './toaster-overview/toaster-overview-example.module';\n\n@NgModule({\n    declarations: [AppComponent, ExampleContainerComponent],\n    imports: [\n        BrowserModule,\n        BrowserAnimationsModule,\n        FormsModule,\n        ReactiveFormsModule,\n        AppRoutingModule,\n        CashmereModule,\n        ToasterOverviewExampleModule\n    ],\n    providers: [],\n    bootstrap: [AppComponent]\n})\nexport class AppModule {}\n",
    "src/app/app.component.ts": "/* eslint-disable @angular-eslint/component-selector */\nimport {Component, ViewEncapsulation} from '@angular/core';\n\n@Component({\n    selector: 'app-root',\n    template: '<router-outlet></router-outlet>',\n    styleUrls: ['../styles.scss'],\n    encapsulation: ViewEncapsulation.None,\n    standalone: false\n})\nexport class AppComponent {}\n",
    "src/app/app-routing.module.ts": "import {NgModule} from '@angular/core';\nimport {Routes, RouterModule} from '@angular/router';\nimport {ExampleContainerComponent} from './example-container.component';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: ExampleContainerComponent\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forRoot(routes, {})],\n    exports: [RouterModule]\n})\nexport class AppRoutingModule {}\n",
    "src/app/toaster-overview/toaster-overview-example.module.ts": "import {NgModule} from '@angular/core';\nimport {ToasterOverviewExampleComponent} from './toaster-overview-example.component';\nimport {ToasterOverviewCustomComponent} from './toaster-overview-custom.component';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {CashmereModule} from '../cashmere.module';\nimport {CommonModule} from '@angular/common';\n\n@NgModule({\n    imports: [CommonModule, CashmereModule, FormsModule, ReactiveFormsModule],\n    declarations: [ToasterOverviewExampleComponent, ToasterOverviewCustomComponent],\n    exports: [ToasterOverviewExampleComponent, ToasterOverviewCustomComponent]\n})\nexport class ToasterOverviewExampleModule {}\n",
    "src/app/toaster-overview/toaster-overview-example.component.ts": "import {Component, TemplateRef} from '@angular/core';\nimport {HcToasterService, HcToastOptions, HcToastRef} from '@healthcatalyst/cashmere';\nimport {ToasterOverviewCustomComponent} from './toaster-overview-custom.component';\nimport {FormControl} from '@angular/forms';\n\n/**\n * @title Toaster Messages overview\n */\n@Component({\n    selector: 'hc-toaster-overview-example',\n    templateUrl: 'toaster-overview-example.component.html',\n    styleUrls: ['toaster-overview-example.component.scss'],\n    standalone: false\n})\nexport class ToasterOverviewExampleComponent {\n    readonly toastHeader = new FormControl('Success!', {nonNullable: true});\n    readonly toastBody = new FormControl('You are awesome!', {nonNullable: true});\n    readonly toastPosition = new FormControl('top-right', {nonNullable: true});\n    readonly toastTimeout = new FormControl(5000, {nonNullable: true});\n    readonly toastClick = new FormControl(false, {nonNullable: true});\n    readonly toastType = new FormControl('success', {nonNullable: true});\n    readonly toastWidth = new FormControl(400, {nonNullable: true});\n    readonly toastProgress = new FormControl('0', {nonNullable: true});\n    readonly progressValue = new FormControl(75, {nonNullable: true});\n    readonly customImage = new FormControl();\n\n    constructor(private toasterService: HcToasterService) {}\n\n    showToast(content: TemplateRef<unknown>): void {\n        let showProgress = false;\n        if (parseInt(this.toastProgress.value, 10) > 0) {\n            showProgress = true;\n        }\n\n        let toastOutput: HcToastRef;\n        const options: HcToastOptions = {\n            header: this.toastHeader.value,\n            body: this.toastBody.value,\n            position: this.toastPosition.value,\n            timeout: this.toastTimeout.value,\n            clickDismiss: this.toastClick.value,\n            type: this.toastType.value,\n            width: this.toastWidth.value,\n            hasProgressBar: showProgress,\n            image: this.customImage.value\n        };\n\n        if (this.toastType.value === 'custom-template') {\n            options.type = 'custom';\n            toastOutput = this.toasterService.addToast(options, content);\n        } else if (this.toastType.value === 'custom-component') {\n            const colorArray: Array<string> = ['#00acac', '#007bff', '#f05323', '#a94c9d', '#e7c447', '#776c7f'];\n            const iconArray: Array<string> = [\n                'fa-spider',\n                'fa-pizza-slice',\n                'fa-leaf',\n                'fa-mug-hot',\n                'fa-beer-mug-empty',\n                'fa-cake-candles'\n            ];\n\n            options.type = 'custom';\n\n            toastOutput = this.toasterService.addToast(options, ToasterOverviewCustomComponent, {\n                randomID: Math.ceil(Math.random() * 10000),\n                randomColor: colorArray[Math.floor(Math.random() * colorArray.length)],\n                randomIcon: iconArray[Math.floor(Math.random() * iconArray.length)]\n            });\n\n            // If more control is needed in configuring the custom component, a function may be passed into componentSetup instead:\n            /* this.toasterService.addToast(options, ToasterOverviewCustomComponent,\n                (componentInstance: ToasterOverviewCustomComponent) => {\n                    componentInstance.randomID = Math.ceil(Math.random() * 10000);\n                    componentInstance.randomColor = colorArray[Math.floor(Math.random() * colorArray.length)];\n                    componentInstance.randomIcon = iconArray[Math.floor(Math.random() * iconArray.length)];\n            }); */\n        } else {\n            toastOutput = this.toasterService.addToast(options);\n        }\n\n        if (this.toastProgress.value === '2') {\n            toastOutput.progress = this.progressValue.value;\n        }\n    }\n\n    closeLastToast(): void {\n        this.toasterService.closeLastToast();\n    }\n\n    closeAllToasts(): void {\n        this.toasterService.closeAllToasts();\n    }\n}\n",
    "src/app/toaster-overview/toaster-overview-example.component.scss": "@import '@healthcatalyst/cashmere/scss/_colors';\n\n.example-column {\n    display: inline-block;\n    vertical-align: top;\n    margin-right: 50px;\n    width: 33%;\n}\n\n@media only screen and (max-width: 576px) {\n    .example-column {\n        margin-right: 0;\n        width: 100%;\n    }\n}\n\n.example-field {\n    width: 100%;\n    display: block;\n}\n\n.example-field-half {\n    width: 45%;\n    display: inline-block;\n}\n\n.right-margin {\n    margin-right: 10%;\n}\n\n.button-row {\n    display: block;\n    width: 100%;\n}\n\n.progress-row {\n    display: flex;\n    align-items: flex-end;\n    width: 100%;\n}\n\n.progress-input {\n    width: 130px;\n}\n\n.custom-toast {\n    border-radius: 5px;\n    background-color: $pink;\n    color: white;\n    padding: 0 20px;\n    height: 180px;\n    font-style: italic;\n    text-align: center;\n}\n\n.spinner-container {\n    height: 78%;\n}\n",
    "src/app/toaster-overview/toaster-overview-example.component.html": "<ng-template #templateToast>\n    <div class=\"custom-toast\">\n        <div class=\"spinner-container\"><hc-progress-spinner diameter=\"70\" color=\"white\"></hc-progress-spinner></div>\n        <span>\n            This is an entirely\n            <strong>custom</strong>\n            toast created from a template\n        </span>\n    </div>\n</ng-template>\n\n<div class=\"example-column\">\n    <hc-form-field class=\"example-field\">\n        <hc-label>Header text:</hc-label>\n        <input hcInput [formControl]=\"toastHeader\" />\n    </hc-form-field>\n\n    <hc-form-field class=\"example-field\">\n        <hc-label>Body text:</hc-label>\n        <input hcInput [formControl]=\"toastBody\" />\n    </hc-form-field>\n\n    <hc-form-field class=\"example-field\">\n        <hc-label>Toast type:</hc-label>\n        <hc-select [formControl]=\"toastType\">\n            <option value=\"success\">Success</option>\n            <option value=\"info\">Info</option>\n            <option value=\"warning\">Warning</option>\n            <option value=\"alert\">Alert</option>\n            <option value=\"custom-template\">Custom (using template)</option>\n            <option value=\"custom-component\">Custom (using component)</option>\n        </hc-select>\n    </hc-form-field>\n</div>\n<div class=\"example-column\">\n    <hc-form-field class=\"example-field\">\n        <hc-label>Toast position:</hc-label>\n        <hc-select [formControl]=\"toastPosition\">\n            <option value=\"top-right\">Top right</option>\n            <option value=\"top-center\">Top center</option>\n            <option value=\"top-left\">Top left</option>\n            <option value=\"top-full-width\">Top full-width</option>\n            <option value=\"bottom-right\">Bottom right</option>\n            <option value=\"bottom-center\">Bottom center</option>\n            <option value=\"bottom-left\">Bottom left</option>\n            <option value=\"bottom-full-width\">Bottom full-width</option>\n        </hc-select>\n    </hc-form-field>\n\n    <hc-form-field class=\"example-field-half right-margin\">\n        <hc-label>Timeout:</hc-label>\n        <input hcInput type=\"number\" [formControl]=\"toastTimeout\" />\n    </hc-form-field>\n\n    <hc-form-field class=\"example-field-half\">\n        <hc-label>Toast width:</hc-label>\n        <input hcInput type=\"number\" [formControl]=\"toastWidth\" />\n    </hc-form-field>\n\n    <hc-form-field class=\"example-field\">\n        <hc-label>Event handling:</hc-label>\n        <hc-checkbox [formControl]=\"toastClick\">Allow clicks to dismiss toast</hc-checkbox>\n    </hc-form-field>\n</div>\n<div class=\"progress-row\">\n    <hc-form-field>\n        <hc-label>Progress bar:</hc-label>\n        <hc-radio-group [formControl]=\"toastProgress\" inline=\"true\">\n            <hc-radio-button value=\"0\">Off</hc-radio-button>\n            <hc-radio-button value=\"1\">Indeterminate</hc-radio-button>\n            <hc-radio-button value=\"2\">Determinate</hc-radio-button>\n        </hc-radio-group>\n    </hc-form-field>\n    <hc-form-field class=\"progress-input\">\n        <input hcInput type=\"number\" [formControl]=\"progressValue\" [disabled]=\"toastProgress.value != '2'\" />\n    </hc-form-field>\n</div>\n<div class=\"progress-row\">\n    <hc-form-field>\n        <hc-label>Custom Image:</hc-label>\n        <hc-radio-group [formControl]=\"customImage\" inline=\"true\">\n            <hc-radio-button [value]=\"null\">None</hc-radio-button>\n            <hc-radio-button [value]=\"'./assets/avatars/avatar92.svg'\">Image URL</hc-radio-button>\n            <hc-radio-button [value]=\"{fontSet: 'hcicons', fontIcon: 'icon-star'}\">HC Icon Object</hc-radio-button>\n        </hc-radio-group>\n    </hc-form-field>\n</div>\n<div class=\"button-row\">\n    <button hc-button buttonStyle=\"primary\" (click)=\"showToast(templateToast)\" class=\"demo-button\">Display Toaster Message</button>\n    <button hc-button buttonStyle=\"secondary\" (click)=\"closeLastToast()\" class=\"demo-button\">Close Last Toast</button>\n    <button hc-button buttonStyle=\"secondary\" (click)=\"closeAllToasts()\" class=\"demo-button\">Close All Toasts</button>\n</div>\n",
    "src/app/toaster-overview/toaster-overview-custom.component.ts": "import {Component} from '@angular/core';\n\n@Component({\n    selector: 'hc-toaster-overview-custom',\n    templateUrl: 'toaster-overview-custom.component.html',\n    styles: [\n        `\n            .custom-toast-component {\n                border-radius: 5px;\n                color: white;\n                padding: 20px 10px;\n                display: flex;\n                width: 100%;\n            }\n            .custom-toast-icon {\n                margin-right: 20px;\n                margin-left: 5px;\n                display: flex;\n                align-items: center;\n            }\n            .custom-toast-header {\n                font-weight: 600;\n                font-size: 18px;\n                margin-bottom: 4px;\n            }\n            .custom-toast-body {\n                font-size: 12px;\n                width: 319px;\n            }\n        `\n    ],\n    standalone: false\n})\nexport class ToasterOverviewCustomComponent {\n    randomID = 0;\n    randomColor = '#ffffff';\n    randomIcon = 'icon-file-lines';\n}\n",
    "src/app/toaster-overview/toaster-overview-custom.component.html": "<div [ngStyle]=\"{'background-color': randomColor}\" class=\"custom-toast-component\">\n    <div class=\"custom-toast-icon\">\n        <hc-icon fontSet=\"fa-solid\" [fontIcon]=\"randomIcon\" hcIconLg></hc-icon>\n    </div>\n    <div>\n        <div class=\"custom-toast-header\">Random Number: {{ randomID }}</div>\n        <div class=\"custom-toast-body\">This is a custom toast using a component containing several random values.</div>\n    </div>\n</div>\n"
}
