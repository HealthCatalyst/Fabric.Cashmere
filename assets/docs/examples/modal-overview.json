{
    "tsconfig.json": "{\n    \"compileOnSave\": false,\n    \"compilerOptions\": {\n        \"baseUrl\": \"./\",\n        \"outDir\": \"./dist/out-tsc\",\n        \"sourceMap\": true,\n        \"declaration\": false,\n        \"module\": \"es2015\",\n        \"moduleResolution\": \"node\",\n        \"experimentalDecorators\": true,\n        \"target\": \"es2022\",\n        \"typeRoots\": [\"node_modules/@types\"],\n        \"lib\": [\"es2018\", \"dom\"]\n    }\n}\n",
    "stackblitz.md": "This directory contains the Angular CLI project files used in the StackBlitz. For the most part, you should not need to edit files in this directory.\n\nTwo exceptions worth noting:\n- `styles.scss` contains global styles for the examples, there may be occasions to add these\n- `package.json` tweak this if it is determined that a particular third-party library should be preoloaded for a stackblitz example\n\nFor more detail on working with examples, see https://cashmere.healthcatalyst.net/guides/working-with-examples.\n",
    "package.json": "{\n  \"name\": \"project-template\",\n  \"version\": \"0.0.0\",\n  \"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"ng serve\",\n    \"build\": \"ng build\",\n    \"test\": \"ng test\",\n    \"lint\": \"ng lint\",\n    \"e2e\": \"ng e2e\"\n  },\n  \"private\": true,\n  \"dependencies\": {\n    \"@angular/animations\": \"^18.2.13\",\n    \"@angular/cdk\": \"^18.2.4\",\n    \"@angular/common\": \"^18.2.13\",\n    \"@angular/compiler\": \"^18.2.13\",\n    \"@angular/core\": \"^18.2.13\",\n    \"@angular/forms\": \"^18.2.13\",\n    \"@angular/platform-browser\": \"^18.2.13\",\n    \"@angular/platform-browser-dynamic\": \"^18.2.13\",\n    \"@angular/platform-server\": \"18.2.13\",\n    \"@angular/router\": \"^18.2.13\",\n    \"@ng-select/ng-select\": \"^13.9.1\",\n    \"@angular-slider/ngx-slider\": \"^18.0.0\",\n    \"core-js\": \"^2.5.4\",\n    \"rxjs\": \"^6.6.0\",\n    \"zone.js\": \"~0.15.0\",\n    \"@healthcatalyst/cashmere\": \"*\",\n    \"notosans-fontface\": \"^1.3.0\",\n    \"@fortawesome/fontawesome-free\": \"^6.7.2\",\n    \"sugar\": \"^2.0.6\",\n    \"lodash\": \"^4.17.21\"\n  },\n  \"devDependencies\": {\n    \"@angular-devkit/build-angular\": \"^18.2.15\",\n    \"@angular/cli\": \"^18.2.15\",\n    \"@angular/compiler-cli\": \"^18.2.13\",\n    \"@angular/language-service\": \"18.2.13\",\n    \"@types/node\": \"^18.14.4\",\n    \"@types/jasmine\": \"~3.8.0\",\n    \"@types/jasminewd2\": \"~2.0.2\",\n    \"codelyzer\": \"^6.0.0\",\n    \"jasmine-core\": \"~3.8.0\",\n    \"jasmine-spec-reporter\": \"~5.0.0\",\n    \"karma\": \"~6.3.16\",\n    \"karma-chrome-launcher\": \"~3.1.0\",\n    \"karma-coverage-istanbul-reporter\": \"~3.0.2\",\n    \"karma-jasmine\": \"~4.0.0\",\n    \"karma-jasmine-html-reporter\": \"^1.5.0\",\n    \"protractor\": \"~5.4.0\",\n    \"ts-node\": \"6.1.7\",\n    \"tslint\": \"~6.1.0\",\n    \"typescript\": \"~5.4.5\"\n  }\n}\n",
    "angular.json": "{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n        \"project-template\": {\n            \"root\": \"\",\n            \"sourceRoot\": \"src\",\n            \"projectType\": \"application\",\n            \"prefix\": \"app\",\n            \"schematics\": {\n                \"@schematics/angular:component\": {\n                    \"styleext\": \"scss\"\n                }\n            },\n            \"architect\": {\n                \"build\": {\n                    \"builder\": \"@angular-devkit/build-angular:browser\",\n                    \"options\": {\n                        \"outputPath\": \"dist/project-template\",\n                        \"index\": \"src/index.html\",\n                        \"main\": \"src/main.ts\",\n                        \"polyfills\": \"src/polyfills.ts\",\n                        \"tsConfig\": \"src/tsconfig.app.json\",\n                        \"assets\": [\"src/favicon.ico\", \"src/assets\"],\n                        \"styles\": [\"src/styles.scss\"]\n                    },\n                    \"configurations\": {\n                        \"production\": {\n                            \"fileReplacements\": [\n                                {\n                                    \"replace\": \"src/environments/environment.ts\",\n                                    \"with\": \"src/environments/environment.prod.ts\"\n                                }\n                            ],\n                            \"optimization\": true,\n                            \"outputHashing\": \"all\",\n                            \"sourceMap\": false,\n                            \"extractCss\": true,\n                            \"namedChunks\": false,\n                            \"aot\": true,\n                            \"extractLicenses\": true,\n                            \"vendorChunk\": false,\n                            \"buildOptimizer\": true,\n                            \"budgets\": [\n                                {\n                                    \"type\": \"initial\",\n                                    \"maximumWarning\": \"2mb\",\n                                    \"maximumError\": \"5mb\"\n                                }\n                            ]\n                        }\n                    }\n                },\n                \"serve\": {\n                    \"builder\": \"@angular-devkit/build-angular:dev-server\",\n                    \"options\": {\n                        \"browserTarget\": \"project-template:build\"\n                    },\n                    \"configurations\": {\n                        \"production\": {\n                            \"browserTarget\": \"project-template:build:production\"\n                        }\n                    }\n                },\n                \"extract-i18n\": {\n                    \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n                    \"options\": {\n                        \"browserTarget\": \"project-template:build\"\n                    }\n                },\n                \"test\": {\n                    \"builder\": \"@angular-devkit/build-angular:karma\",\n                    \"options\": {\n                        \"main\": \"src/test.ts\",\n                        \"polyfills\": \"src/polyfills.ts\",\n                        \"tsConfig\": \"src/tsconfig.spec.json\",\n                        \"karmaConfig\": \"src/karma.conf.js\",\n                        \"styles\": [\"src/styles.scss\"],\n                        \"scripts\": [],\n                        \"assets\": [\"src/favicon.ico\", \"src/assets\"]\n                    }\n                },\n                \"lint\": {\n                    \"builder\": \"@angular-devkit/build-angular:tslint\",\n                    \"options\": {\n                        \"tsConfig\": [\"src/tsconfig.app.json\", \"src/tsconfig.spec.json\"],\n                        \"exclude\": [\"**/node_modules/**\"]\n                    }\n                }\n            }\n        },\n        \"project-template-e2e\": {\n            \"root\": \"e2e/\",\n            \"projectType\": \"application\",\n            \"prefix\": \"\",\n            \"architect\": {\n                \"e2e\": {\n                    \"builder\": \"@angular-devkit/build-angular:protractor\",\n                    \"options\": {\n                        \"protractorConfig\": \"e2e/protractor.conf.js\",\n                        \"devServerTarget\": \"project-template:serve\"\n                    },\n                    \"configurations\": {\n                        \"production\": {\n                            \"devServerTarget\": \"project-template:serve:production\"\n                        }\n                    }\n                },\n                \"lint\": {\n                    \"builder\": \"@angular-devkit/build-angular:tslint\",\n                    \"options\": {\n                        \"tsConfig\": \"e2e/tsconfig.e2e.json\",\n                        \"exclude\": [\"**/node_modules/**\"]\n                    }\n                }\n            }\n        }\n    },\n    \"defaultProject\": \"project-template\"\n}\n",
    "src/tsconfig.app.json": "{\n    \"extends\": \"../tsconfig.json\",\n    \"compilerOptions\": {\n        \"outDir\": \"../out-tsc/app\",\n        \"types\": []\n    },\n    \"exclude\": [\"test.ts\", \"**/*.spec.ts\"]\n}\n",
    "src/styles.scss": "$fa-font-path: '../webfonts';\n@import '~@fortawesome/fontawesome-free/scss/fontawesome';\n@import '~@fortawesome/fontawesome-free/scss/regular';\n@import '~@fortawesome/fontawesome-free/scss/solid';\n@import '~@fortawesome/fontawesome-free/scss/brands';\n\n$notosans-fontface-path: \"node_modules/notosans-fontface/fonts\";\n@import \"~notosans-fontface/scss/notosans-fontface-allweight\";\n\n$hc-icons-font-path: 'node_modules/@healthcatalyst/cashmere/hcicons';\n@import '@healthcatalyst/cashmere/hcicons2/hcicons2';\n\n@import '@healthcatalyst/cashmere/scss/cashmere';\n\n// global styles for stackblitz examples\n.demo-button {\n    margin-top: 10px !important;\n    margin-right: 10px !important;\n}\n\nhc-example-viewer .hc-tab-content-horizontal {\n    padding: 3px;\n}\n\n.pipe-output {\n    font-weight: 600px;\n    font-size: 22px;\n}\n",
    "src/polyfills.ts": "/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/guide/browser-support\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/**\n * IE11 requires the following for NgClass support on SVG elements\n */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n */\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n * because those flags need to be set before `zone.js` being loaded, and webpack\n * will put import in the top of bundle, so user need to create a separate file\n * in this directory (for example: zone-flags.ts), and put the following flags\n * into that file, and then add the following code before importing zone.js.\n * import './zone-flags';\n *\n * The flags allowed in zone-flags.ts are listed here.\n *\n * The following flags will work for all browsers.\n *\n * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n *\n *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n *  with the following flag, it will bypass `zone.js` patch for IE/Edge\n *\n *  (window as any).__Zone_enable_cross_context_check = true;\n *\n */\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\n import 'zone.js';  // Included with Angular CLI.\n\n\n /***************************************************************************************************\n  * APPLICATION IMPORTS\n  */\n",
    "src/main.ts": "import {enableProdMode} from '@angular/core';\nimport {platformBrowserDynamic} from '@angular/platform-browser-dynamic';\n\nimport {AppModule} from './app/app.module';\nimport {environment} from './environments/environment';\n\nif (environment.production) {\n    enableProdMode();\n}\n\nplatformBrowserDynamic()\n    .bootstrapModule(AppModule)\n    .catch(err => console.error(err));\n",
    "src/index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>ProjectTemplate</title>\n  <base href=\"/\">\n\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n</head>\n<body>\n  <app-root></app-root>\n</body>\n</html>\n",
    "src/environments/environment.ts": "// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n    production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\n",
    "src/environments/environment.prod.ts": "export const environment = {\n    production: true\n};\n",
    "src/assets/.gitkeep": "",
    "src/app/example-container.component.ts": "/* eslint-disable @angular-eslint/component-selector */\nimport {Component} from '@angular/core';\n\n@Component({\n    selector: 'app-example-container',\n    template: '<hc-example></hc-example>',\n    standalone: false\n})\nexport class ExampleContainerComponent {}\n",
    "src/app/cashmere.module.ts": "import {NgModule} from '@angular/core';\nimport {\n    AccordionModule,\n    AppSwitcherModule,\n    BreadcrumbsModule,\n    BannerModule,\n    ButtonModule,\n    ButtonToggleModule,\n    CheckboxModule,\n    ChipModule,\n    ColumnMenuModule,\n    DatepickerModule,\n    DateRangeModule,\n    DrawerModule,\n    DragListModule,\n    EnvSwitcherModule,\n    FormFieldModule,\n    IconModule,\n    InputModule,\n    InstanceSwitcherModule,\n    ListModule,\n    MeasurableModule,\n    ModalModule,\n    ReleaseNotesModalModule,\n    MultiselectModule,\n    NavbarModule,\n    FileUploaderModule,\n    PaginationModule,\n    PicklistOldModule,\n    PicklistModule,\n    PipesModule,\n    PopModule,\n    ProgressIndicatorsModule,\n    RadioButtonModule,\n    ResizableModule,\n    ScrollNavModule,\n    SearchBarModule,\n    SelectModule,\n    SidenavModule,\n    SortModule,\n    SliderModule,\n    SlideToggleModule,\n    StepperModule,\n    SubnavModule,\n    TabsModule,\n    TableModule,\n    TileModule,\n    ToasterModule,\n    TypeformSurveyModule\n} from '@healthcatalyst/cashmere';\n\n@NgModule({\n    exports: [\n        AccordionModule,\n        AppSwitcherModule,\n        BreadcrumbsModule,\n        BannerModule,\n        ButtonModule,\n        ButtonToggleModule,\n        CheckboxModule,\n        ChipModule,\n        ColumnMenuModule,\n        DatepickerModule,\n        DateRangeModule,\n        DrawerModule,\n        DragListModule,\n        EnvSwitcherModule,\n        FormFieldModule,\n        IconModule,\n        InputModule,\n        InstanceSwitcherModule,\n        ListModule,\n        MeasurableModule,\n        ModalModule,\n        ReleaseNotesModalModule,\n        MultiselectModule,\n        FileUploaderModule,\n        NavbarModule,\n        PaginationModule,\n        PicklistOldModule,\n        PicklistModule,\n        PipesModule,\n        PopModule,\n        ProgressIndicatorsModule,\n        RadioButtonModule,\n        ResizableModule,\n        ScrollNavModule,\n        SearchBarModule,\n        SelectModule,\n        SortModule,\n        SidenavModule,\n        SliderModule,\n        SlideToggleModule,\n        StepperModule,\n        SubnavModule,\n        TableModule,\n        TabsModule,\n        TileModule,\n        ToasterModule,\n        TypeformSurveyModule\n    ]\n})\nexport class CashmereModule {}\n",
    "src/app/app.module.ts": "import {BrowserModule} from '@angular/platform-browser';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {NgModule} from '@angular/core';\n\nimport {AppRoutingModule} from './app-routing.module';\nimport {AppComponent} from './app.component';\nimport {ExampleContainerComponent} from './example-container.component';\nimport {CashmereModule} from './cashmere.module';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {ModalOverviewExampleModule} from './modal-overview/modal-overview-example.module';\n\n@NgModule({\n    declarations: [AppComponent, ExampleContainerComponent],\n    imports: [\n        BrowserModule,\n        BrowserAnimationsModule,\n        FormsModule,\n        ReactiveFormsModule,\n        AppRoutingModule,\n        CashmereModule,\n        ModalOverviewExampleModule\n    ],\n    providers: [],\n    bootstrap: [AppComponent]\n})\nexport class AppModule {}\n",
    "src/app/app.component.ts": "/* eslint-disable @angular-eslint/component-selector */\nimport {Component, ViewEncapsulation} from '@angular/core';\n\n@Component({\n    selector: 'app-root',\n    template: '<router-outlet></router-outlet>',\n    styleUrls: ['../styles.scss'],\n    encapsulation: ViewEncapsulation.None,\n    standalone: false\n})\nexport class AppComponent {}\n",
    "src/app/app-routing.module.ts": "import {NgModule} from '@angular/core';\nimport {Routes, RouterModule} from '@angular/router';\nimport {ExampleContainerComponent} from './example-container.component';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: ExampleContainerComponent\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forRoot(routes, {})],\n    exports: [RouterModule]\n})\nexport class AppRoutingModule {}\n",
    "src/app/modal-overview/modal-overview-example.module.ts": "import {NgModule} from '@angular/core';\nimport {ModalOverviewExampleComponent} from './modal-overview-example.component';\nimport {ModalOverviewExampleModalComponent} from './modal-overview-example-modal.component';\nimport {CashmereModule} from '../cashmere.module';\nimport {CommonModule} from '@angular/common';\n\n@NgModule({\n    imports: [CommonModule, CashmereModule],\n    declarations: [ModalOverviewExampleComponent, ModalOverviewExampleModalComponent],\n    exports: [ModalOverviewExampleComponent, ModalOverviewExampleModalComponent]\n})\nexport class ModalOverviewExampleModule {}\n",
    "src/app/modal-overview/modal-overview-example.component.ts": "import {HcModal, ModalOptions, ModalService} from '@healthcatalyst/cashmere';\nimport {Component, TemplateRef} from '@angular/core';\nimport {ModalOverviewExampleModalComponent} from './modal-overview-example-modal.component';\n\n/**\n * @title Modal overview\n */\n@Component({\n    selector: 'hc-modal-overview-example',\n    templateUrl: 'modal-overview-example.component.html',\n    standalone: false\n})\nexport class ModalOverviewExampleComponent {\n    result: unknown;\n\n    constructor(private modalService: ModalService) {}\n\n    openStandard(): void {\n        const options: ModalOptions = {\n            data: {\n                content:\n                    'This is a size lg modal. If isDraggable is set to true, it places a drag handle in the top right corner which you can use to reposition the modal. If isResizable is set to true, a resize handle appears in the bottom right to change the dimensions of the modal. They may be used together or separately.',\n                isTightExample: false\n            },\n            ignoreEscapeKey: true,\n            ignoreOverlayClick: true,\n            size: 'lg'\n        };\n        const subModal: HcModal<ModalOverviewExampleModalComponent> = this.modalService.open(ModalOverviewExampleModalComponent, options);\n        subModal.result.subscribe(res => (this.result = res));\n    }\n\n    openTight(): void {\n        const options: ModalOptions = {\n            data: {\n                content: 'If tight is set to true, padding on the header, footer, and body will be set to 15px.',\n                isTightExample: true\n            },\n            ignoreEscapeKey: true,\n            ignoreOverlayClick: true,\n            size: 'sm',\n            tight: true\n        };\n        this.modalService.open(ModalOverviewExampleModalComponent, options);\n    }\n\n    openTemplate(content: TemplateRef<unknown>): void {\n        const options: ModalOptions = {\n            data:\n                'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis fermentum nulla in consectetur tempus. Mauris quis turpis blandit, porta nulla in, sollicitudin libero. Sed pulvinar velit eget lacus euismod interdum. Proin vitae aliquam augue. Vestibulum fermentum turpis quis convallis vehicula. Nullam posuere facilisis rutrum. Nullam congue, arcu eget scelerisque viverra, orci nibh iaculis ante, a tincidunt elit arcu at tortor. Vestibulum in nulla turpis. Phasellus dapibus tellus urna, a fringilla orci rutrum ac. Integer lacinia, erat ac ultricies cursus, lacus velit pellentesque sem, at mollis magna nulla elementum justo. Nam sit amet viverra lorem. Cras sodales gravida mi nec eleifend. Interdum et malesuada fames ac ante ipsum primis in faucibus. Nunc elementum quis turpis sit amet efficitur. Aenean id lectus at dolor feugiat finibus eu a est. Vivamus tortor mi, lacinia sit amet nulla pellentesque, tincidunt fringilla risus.',\n            size: 'md',\n            ignoreOverlayClick: true,\n            isDraggable: true,\n            isResizable: true\n        };\n        this.modalService.open(content, options);\n    }\n\n    openViewer(content: TemplateRef<unknown>): void {\n        const options: ModalOptions = {\n            size: 'lg',\n            closeIcon: true\n        };\n        this.modalService.open(content, options);\n    }\n}\n",
    "src/app/modal-overview/modal-overview-example.component.html": "<ng-template #content let-close=\"close\" let-dismiss=\"dismiss\" let-data=\"data\">\n    <hc-modal>\n        <hc-modal-header>Modal Title</hc-modal-header>\n        <hc-modal-body>Data: {{ data }}</hc-modal-body>\n        <hc-modal-footer>\n            <button hc-button buttonStyle=\"link\" (click)=\"dismiss()\">Cancel</button>\n            <button hc-button buttonStyle=\"primary\" (click)=\"close()\">OK</button>\n        </hc-modal-footer>\n    </hc-modal>\n</ng-template>\n\n<ng-template #modalViewer>\n    <hc-modal>\n        <hc-modal-header>Modal with Close Icon</hc-modal-header>\n        <hc-modal-body style=\"padding: 0\">\n            <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/2/23/Blue_Marble_2002.png/1200px-Blue_Marble_2002.png\" />\n        </hc-modal-body>\n        <hc-modal-footer [minimal]=\"true\"></hc-modal-footer>\n    </hc-modal>\n</ng-template>\n\n<button hc-button buttonStyle=\"primary\" (click)=\"openStandard()\" class=\"demo-button\">Standard Modal from Component</button>\n<br />\n<button hc-button buttonStyle=\"secondary\" (click)=\"openTight()\" class=\"demo-button\">Tight Modal from Component</button>\n<br />\n<button hc-button buttonStyle=\"secondary\" (click)=\"openTemplate(content)\" class=\"demo-button\">\n    Draggable Resizable Modal from Template\n</button>\n<br />\n<button hc-button buttonStyle=\"secondary\" (click)=\"openViewer(modalViewer)\" class=\"demo-button\">\n    Modal with Close Icon and Minimal Footer\n</button>\n",
    "src/app/modal-overview/modal-overview-example-modal.component.ts": "import {Component} from '@angular/core';\nimport {ActiveModal} from '@healthcatalyst/cashmere';\n\n@Component({\n    selector: 'hc-modal-overview-example-modal',\n    templateUrl: 'modal-overview-example-modal.component.html',\n    styleUrls: ['modal-overview-example-modal.component.scss'],\n    standalone: false\n})\nexport class ModalOverviewExampleModalComponent {\n    constructor(public activeModal: ActiveModal) {}\n\n    close(): void {\n        this.activeModal.close();\n    }\n\n    cancel(): void {\n        this.activeModal.dismiss();\n    }\n}\n",
    "src/app/modal-overview/modal-overview-example-modal.component.scss": "// This min-width was set for visual balance on tight modal example buttons because small buttons don't have a min-width in Cashmere\n.tight-button {\n    min-width: 120px;\n}\n",
    "src/app/modal-overview/modal-overview-example-modal.component.html": "<hc-modal>\n    <hc-modal-header>Modal Header Title</hc-modal-header>\n    <hc-banner type=\"warning\" *ngIf=\"!activeModal.data.isTightExample\">\n        <span hcBannerStamp>WARNING</span>\n        You are about to export data which may include Protected Health Information (PHI)\n    </hc-banner>\n    <hc-modal-body>Data: {{ activeModal.data.content }}</hc-modal-body>\n    <hc-modal-footer>\n        <button\n            hc-button\n            buttonStyle=\"link\"\n            (click)=\"cancel()\"\n            [size]=\"activeModal.data.isTightExample ? 'sm' : 'md'\"\n            [class.tight-button]=\"activeModal.data.isTightExample\"\n        >\n            Cancel\n        </button>\n        <button\n            hc-button\n            buttonStyle=\"primary\"\n            (click)=\"close()\"\n            [size]=\"activeModal.data.isTightExample ? 'sm' : 'md'\"\n            [class.tight-button]=\"activeModal.data.isTightExample\"\n        >\n            OK\n        </button>\n    </hc-modal-footer>\n</hc-modal>\n"
}
