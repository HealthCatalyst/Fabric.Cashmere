{
    "tsconfig.json": "{\n    \"compileOnSave\": false,\n    \"compilerOptions\": {\n        \"baseUrl\": \"./\",\n        \"outDir\": \"./dist/out-tsc\",\n        \"sourceMap\": true,\n        \"declaration\": false,\n        \"module\": \"es2015\",\n        \"moduleResolution\": \"node\",\n        \"experimentalDecorators\": true,\n        \"target\": \"es2022\",\n        \"typeRoots\": [\"node_modules/@types\"],\n        \"lib\": [\"es2018\", \"dom\"]\n    }\n}\n",
    "stackblitz.md": "This directory contains the Angular CLI project files used in the StackBlitz. For the most part, you should not need to edit files in this directory.\n\nTwo exceptions worth noting:\n- `styles.scss` contains global styles for the examples, there may be occasions to add these\n- `package.json` tweak this if it is determined that a particular third-party library should be preoloaded for a stackblitz example\n\nFor more detail on working with examples, see https://cashmere.healthcatalyst.net/guides/working-with-examples.\n",
    "package.json": "{\n  \"name\": \"project-template\",\n  \"version\": \"0.0.0\",\n  \"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"ng serve\",\n    \"build\": \"ng build\",\n    \"test\": \"ng test\",\n    \"lint\": \"ng lint\",\n    \"e2e\": \"ng e2e\"\n  },\n  \"private\": true,\n  \"dependencies\": {\n    \"@angular/animations\": \"^18.2.13\",\n    \"@angular/cdk\": \"^18.2.4\",\n    \"@angular/common\": \"^18.2.13\",\n    \"@angular/compiler\": \"^18.2.13\",\n    \"@angular/core\": \"^18.2.13\",\n    \"@angular/forms\": \"^18.2.13\",\n    \"@angular/platform-browser\": \"^18.2.13\",\n    \"@angular/platform-browser-dynamic\": \"^18.2.13\",\n    \"@angular/platform-server\": \"18.2.13\",\n    \"@angular/router\": \"^18.2.13\",\n    \"@ng-select/ng-select\": \"^13.9.1\",\n    \"@angular-slider/ngx-slider\": \"^18.0.0\",\n    \"core-js\": \"^2.5.4\",\n    \"rxjs\": \"^6.6.0\",\n    \"zone.js\": \"~0.15.0\",\n    \"@healthcatalyst/cashmere\": \"*\",\n    \"notosans-fontface\": \"^1.3.0\",\n    \"@fortawesome/fontawesome-free\": \"^6.7.2\",\n    \"sugar\": \"^2.0.6\",\n    \"lodash\": \"^4.17.21\"\n  },\n  \"devDependencies\": {\n    \"@angular-devkit/build-angular\": \"^18.2.15\",\n    \"@angular/cli\": \"^18.2.15\",\n    \"@angular/compiler-cli\": \"^18.2.13\",\n    \"@angular/language-service\": \"18.2.13\",\n    \"@types/node\": \"^18.14.4\",\n    \"@types/jasmine\": \"~3.8.0\",\n    \"@types/jasminewd2\": \"~2.0.2\",\n    \"codelyzer\": \"^6.0.0\",\n    \"jasmine-core\": \"~3.8.0\",\n    \"jasmine-spec-reporter\": \"~5.0.0\",\n    \"karma\": \"~6.3.16\",\n    \"karma-chrome-launcher\": \"~3.1.0\",\n    \"karma-coverage-istanbul-reporter\": \"~3.0.2\",\n    \"karma-jasmine\": \"~4.0.0\",\n    \"karma-jasmine-html-reporter\": \"^1.5.0\",\n    \"protractor\": \"~5.4.0\",\n    \"ts-node\": \"6.1.7\",\n    \"tslint\": \"~6.1.0\",\n    \"typescript\": \"~5.4.5\"\n  }\n}\n",
    "angular.json": "{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n        \"project-template\": {\n            \"root\": \"\",\n            \"sourceRoot\": \"src\",\n            \"projectType\": \"application\",\n            \"prefix\": \"app\",\n            \"schematics\": {\n                \"@schematics/angular:component\": {\n                    \"styleext\": \"scss\"\n                }\n            },\n            \"architect\": {\n                \"build\": {\n                    \"builder\": \"@angular-devkit/build-angular:browser\",\n                    \"options\": {\n                        \"outputPath\": \"dist/project-template\",\n                        \"index\": \"src/index.html\",\n                        \"main\": \"src/main.ts\",\n                        \"polyfills\": \"src/polyfills.ts\",\n                        \"tsConfig\": \"src/tsconfig.app.json\",\n                        \"assets\": [\"src/favicon.ico\", \"src/assets\"],\n                        \"styles\": [\"src/styles.scss\"]\n                    },\n                    \"configurations\": {\n                        \"production\": {\n                            \"fileReplacements\": [\n                                {\n                                    \"replace\": \"src/environments/environment.ts\",\n                                    \"with\": \"src/environments/environment.prod.ts\"\n                                }\n                            ],\n                            \"optimization\": true,\n                            \"outputHashing\": \"all\",\n                            \"sourceMap\": false,\n                            \"extractCss\": true,\n                            \"namedChunks\": false,\n                            \"aot\": true,\n                            \"extractLicenses\": true,\n                            \"vendorChunk\": false,\n                            \"buildOptimizer\": true,\n                            \"budgets\": [\n                                {\n                                    \"type\": \"initial\",\n                                    \"maximumWarning\": \"2mb\",\n                                    \"maximumError\": \"5mb\"\n                                }\n                            ]\n                        }\n                    }\n                },\n                \"serve\": {\n                    \"builder\": \"@angular-devkit/build-angular:dev-server\",\n                    \"options\": {\n                        \"browserTarget\": \"project-template:build\"\n                    },\n                    \"configurations\": {\n                        \"production\": {\n                            \"browserTarget\": \"project-template:build:production\"\n                        }\n                    }\n                },\n                \"extract-i18n\": {\n                    \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n                    \"options\": {\n                        \"browserTarget\": \"project-template:build\"\n                    }\n                },\n                \"test\": {\n                    \"builder\": \"@angular-devkit/build-angular:karma\",\n                    \"options\": {\n                        \"main\": \"src/test.ts\",\n                        \"polyfills\": \"src/polyfills.ts\",\n                        \"tsConfig\": \"src/tsconfig.spec.json\",\n                        \"karmaConfig\": \"src/karma.conf.js\",\n                        \"styles\": [\"src/styles.scss\"],\n                        \"scripts\": [],\n                        \"assets\": [\"src/favicon.ico\", \"src/assets\"]\n                    }\n                },\n                \"lint\": {\n                    \"builder\": \"@angular-devkit/build-angular:tslint\",\n                    \"options\": {\n                        \"tsConfig\": [\"src/tsconfig.app.json\", \"src/tsconfig.spec.json\"],\n                        \"exclude\": [\"**/node_modules/**\"]\n                    }\n                }\n            }\n        },\n        \"project-template-e2e\": {\n            \"root\": \"e2e/\",\n            \"projectType\": \"application\",\n            \"prefix\": \"\",\n            \"architect\": {\n                \"e2e\": {\n                    \"builder\": \"@angular-devkit/build-angular:protractor\",\n                    \"options\": {\n                        \"protractorConfig\": \"e2e/protractor.conf.js\",\n                        \"devServerTarget\": \"project-template:serve\"\n                    },\n                    \"configurations\": {\n                        \"production\": {\n                            \"devServerTarget\": \"project-template:serve:production\"\n                        }\n                    }\n                },\n                \"lint\": {\n                    \"builder\": \"@angular-devkit/build-angular:tslint\",\n                    \"options\": {\n                        \"tsConfig\": \"e2e/tsconfig.e2e.json\",\n                        \"exclude\": [\"**/node_modules/**\"]\n                    }\n                }\n            }\n        }\n    },\n    \"defaultProject\": \"project-template\"\n}\n",
    "src/tsconfig.app.json": "{\n    \"extends\": \"../tsconfig.json\",\n    \"compilerOptions\": {\n        \"outDir\": \"../out-tsc/app\",\n        \"types\": []\n    },\n    \"exclude\": [\"test.ts\", \"**/*.spec.ts\"]\n}\n",
    "src/styles.scss": "$fa-font-path: '../webfonts';\n@import '~@fortawesome/fontawesome-free/scss/fontawesome';\n@import '~@fortawesome/fontawesome-free/scss/regular';\n@import '~@fortawesome/fontawesome-free/scss/solid';\n@import '~@fortawesome/fontawesome-free/scss/brands';\n\n$notosans-fontface-path: \"node_modules/notosans-fontface/fonts\";\n@import \"~notosans-fontface/scss/notosans-fontface-allweight\";\n\n$hc-icons-font-path: 'node_modules/@healthcatalyst/cashmere/hcicons';\n@import '@healthcatalyst/cashmere/hcicons2/hcicons2';\n\n@import '@healthcatalyst/cashmere/scss/cashmere';\n\n// global styles for stackblitz examples\n.demo-button {\n    margin-top: 10px !important;\n    margin-right: 10px !important;\n}\n\nhc-example-viewer .hc-tab-content-horizontal {\n    padding: 3px;\n}\n\n.pipe-output {\n    font-weight: 600px;\n    font-size: 22px;\n}\n",
    "src/polyfills.ts": "/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/guide/browser-support\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/**\n * IE11 requires the following for NgClass support on SVG elements\n */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n */\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n * because those flags need to be set before `zone.js` being loaded, and webpack\n * will put import in the top of bundle, so user need to create a separate file\n * in this directory (for example: zone-flags.ts), and put the following flags\n * into that file, and then add the following code before importing zone.js.\n * import './zone-flags';\n *\n * The flags allowed in zone-flags.ts are listed here.\n *\n * The following flags will work for all browsers.\n *\n * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n *\n *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n *  with the following flag, it will bypass `zone.js` patch for IE/Edge\n *\n *  (window as any).__Zone_enable_cross_context_check = true;\n *\n */\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\n import 'zone.js';  // Included with Angular CLI.\n\n\n /***************************************************************************************************\n  * APPLICATION IMPORTS\n  */\n",
    "src/main.ts": "import {enableProdMode} from '@angular/core';\nimport {platformBrowserDynamic} from '@angular/platform-browser-dynamic';\n\nimport {AppModule} from './app/app.module';\nimport {environment} from './environments/environment';\n\nif (environment.production) {\n    enableProdMode();\n}\n\nplatformBrowserDynamic()\n    .bootstrapModule(AppModule)\n    .catch(err => console.error(err));\n",
    "src/index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>ProjectTemplate</title>\n  <base href=\"/\">\n\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n</head>\n<body>\n  <app-root></app-root>\n</body>\n</html>\n",
    "src/environments/environment.ts": "// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n    production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\n",
    "src/environments/environment.prod.ts": "export const environment = {\n    production: true\n};\n",
    "src/assets/.gitkeep": "",
    "src/app/example-container.component.ts": "/* eslint-disable @angular-eslint/component-selector */\nimport {Component} from '@angular/core';\n\n@Component({\n    selector: 'app-example-container',\n    template: '<hc-example></hc-example>',\n    standalone: false\n})\nexport class ExampleContainerComponent {}\n",
    "src/app/cashmere.module.ts": "import {NgModule} from '@angular/core';\nimport {\n    AccordionModule,\n    AppSwitcherModule,\n    BreadcrumbsModule,\n    BannerModule,\n    ButtonModule,\n    ButtonToggleModule,\n    CheckboxModule,\n    ChipModule,\n    ColumnMenuModule,\n    DatepickerModule,\n    DateRangeModule,\n    DrawerModule,\n    DragListModule,\n    EnvSwitcherModule,\n    FormFieldModule,\n    IconModule,\n    InputModule,\n    InstanceSwitcherModule,\n    ListModule,\n    MeasurableModule,\n    ModalModule,\n    ReleaseNotesModalModule,\n    MultiselectModule,\n    NavbarModule,\n    FileUploaderModule,\n    PaginationModule,\n    PicklistOldModule,\n    PicklistModule,\n    PipesModule,\n    PopModule,\n    ProgressIndicatorsModule,\n    RadioButtonModule,\n    ResizableModule,\n    ScrollNavModule,\n    SearchBarModule,\n    SelectModule,\n    SidenavModule,\n    SortModule,\n    SliderModule,\n    SlideToggleModule,\n    StepperModule,\n    SubnavModule,\n    TabsModule,\n    TableModule,\n    TileModule,\n    ToasterModule,\n    TypeformSurveyModule\n} from '@healthcatalyst/cashmere';\n\n@NgModule({\n    exports: [\n        AccordionModule,\n        AppSwitcherModule,\n        BreadcrumbsModule,\n        BannerModule,\n        ButtonModule,\n        ButtonToggleModule,\n        CheckboxModule,\n        ChipModule,\n        ColumnMenuModule,\n        DatepickerModule,\n        DateRangeModule,\n        DrawerModule,\n        DragListModule,\n        EnvSwitcherModule,\n        FormFieldModule,\n        IconModule,\n        InputModule,\n        InstanceSwitcherModule,\n        ListModule,\n        MeasurableModule,\n        ModalModule,\n        ReleaseNotesModalModule,\n        MultiselectModule,\n        FileUploaderModule,\n        NavbarModule,\n        PaginationModule,\n        PicklistOldModule,\n        PicklistModule,\n        PipesModule,\n        PopModule,\n        ProgressIndicatorsModule,\n        RadioButtonModule,\n        ResizableModule,\n        ScrollNavModule,\n        SearchBarModule,\n        SelectModule,\n        SortModule,\n        SidenavModule,\n        SliderModule,\n        SlideToggleModule,\n        StepperModule,\n        SubnavModule,\n        TableModule,\n        TabsModule,\n        TileModule,\n        ToasterModule,\n        TypeformSurveyModule\n    ]\n})\nexport class CashmereModule {}\n",
    "src/app/app.module.ts": "import {BrowserModule} from '@angular/platform-browser';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {NgModule} from '@angular/core';\n\nimport {AppRoutingModule} from './app-routing.module';\nimport {AppComponent} from './app.component';\nimport {ExampleContainerComponent} from './example-container.component';\nimport {CashmereModule} from './cashmere.module';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {PicklistRemoteDataExampleModule} from './picklist-remote-data/picklist-remote-data-example.module';\n\n@NgModule({\n    declarations: [AppComponent, ExampleContainerComponent],\n    imports: [\n        BrowserModule,\n        BrowserAnimationsModule,\n        FormsModule,\n        ReactiveFormsModule,\n        AppRoutingModule,\n        CashmereModule,\n        PicklistRemoteDataExampleModule\n    ],\n    providers: [],\n    bootstrap: [AppComponent]\n})\nexport class AppModule {}\n",
    "src/app/app.component.ts": "/* eslint-disable @angular-eslint/component-selector */\nimport {Component, ViewEncapsulation} from '@angular/core';\n\n@Component({\n    selector: 'app-root',\n    template: '<router-outlet></router-outlet>',\n    styleUrls: ['../styles.scss'],\n    encapsulation: ViewEncapsulation.None,\n    standalone: false\n})\nexport class AppComponent {}\n",
    "src/app/app-routing.module.ts": "import {NgModule} from '@angular/core';\nimport {Routes, RouterModule} from '@angular/router';\nimport {ExampleContainerComponent} from './example-container.component';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: ExampleContainerComponent\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forRoot(routes, {})],\n    exports: [RouterModule]\n})\nexport class AppRoutingModule {}\n",
    "src/app/picklist-remote-data/picklist-remote-data.service.ts": "import {Injectable} from '@angular/core';\nimport {Observable, of} from 'rxjs';\nimport {delay} from 'rxjs/operators';\n\nexport interface Person {\n    id: string;\n    age: number;\n    name: string;\n}\n\n@Injectable()\nexport class PicklistRemoteDataService {\n    mockPeople = names.map((n, index) => {\n        return {\n            id: `1234${index}`,\n            age: Math.floor(Math.random() * 40) + 18,\n            name: n\n        };\n    });\n\n    getPeople(term = '', selectedPersons: Array<Person>): Observable<Person[]> {\n        let items = this.mockPeople.filter(mp => !selectedPersons.some(sp => sp.id === mp.id));\n        if (term) {\n            items = items.filter(x => x.name.toLocaleLowerCase().indexOf(term.toLocaleLowerCase()) > -1).slice(0, 50);\n        } else {\n            items = items.slice(0, 50);\n        }\n        return of(items).pipe(delay(1000));\n    }\n}\n\nconst names = [\n    'Karyn Wright',\n    'Rochelle Estes',\n    'Mendoza Ruiz',\n    'Rosales Russell',\n    'Marquez Nolan',\n    'Franklin James',\n    'Elsa Bradley',\n    'Pearson Thompson',\n    'Ina Pugh',\n    'Nguyen Elliott',\n    'Mills Barnett',\n    'Margaret Reynolds',\n    'Yvette Navarro',\n    'Elisa Guzman',\n    'Jodie Bowman',\n    'Diann Booker',\n    'Harriet Hamilton',\n    'Ruby Pearce',\n    'Zoe Stewart',\n    'Zoey Ellis',\n    'Evelyn Harvey',\n    'Matthew Spencer',\n    'Sebastian Gray',\n    'Aiden Bell',\n    'Braxton Watson',\n    'Justin Wright',\n    'Hayley Baker',\n    'Alyssa James',\n    'Emily Rogers',\n    'Sarah Elliott',\n    'Lily White',\n    'Penelope Webb',\n    'Harriet Fowler',\n    'Amelia Campbell',\n    'Maryam Blair',\n    'Elsie Fern',\n    'Toby James',\n    'James Harris',\n    'Liam Duncan',\n    'Joshua Bailey',\n    'Blake Thompson',\n    'Jesse Tanner',\n    'Noah McDonald',\n    'Bodhi Bell',\n    'Harley Horner',\n    'Archer Hansen',\n    'Ivy Wright',\n    'Millie Tran',\n    'Elena Flanagan',\n    'Poppy Cooper',\n    'Florence Simpson',\n    'Mikayla Nevin',\n    'Eliana Martin',\n    'Bella Clemens',\n    'Isabella Stevens',\n    'Matilda Connell',\n    'Aaron Parker',\n    'Declan Horner',\n    'Harrison Gilbert',\n    'Arlo Johnson',\n    'Ethan Hughes',\n    'Noah Ronin',\n    'Aidan Lucas',\n    'Maxwell Tanner',\n    'Spencer Thompson',\n    'Blake McLean',\n    'Sienna Weaving',\n    'Aria Butler',\n    'Scarlett Wynter',\n    'Mariam Brown',\n    'Abigail Horner',\n    'Natalie Madden',\n    'Eliana Phillips',\n    'Amy Richardson',\n    'Caitlin Harrison',\n    'Ruby Holt',\n    'Leon Kennedy',\n    'Benjamin Morgan',\n    'Alex Crowe',\n    'Spencer Wilson',\n    'Vincent Weaver',\n    'Chase Ryan',\n    'Kai King',\n    'Finn Palmer',\n    'Lachlan Moore',\n    'Leo Matthews',\n    'Sadie Walsman',\n    'Harriet Roberts',\n    'Molly Smith',\n    'Leah Noble',\n    'Florence Robbinson',\n    'Eliana Thompson',\n    'Sophie Swan',\n    'Amelie Helman',\n    'Matilda Quin',\n    'Eleanor Harrison',\n    'Seth Bennett',\n    'Sonny Fern',\n    'Cody Mason',\n    'Ethan Irwin',\n    'David Knight',\n    'Koby Richardson',\n    'Toby Whitworth',\n    'Thomas Crowe',\n    'Oliver Rogers',\n    'Hunter Tanner',\n    'Frances Levine',\n    'Peggy Gregory',\n    'Rosie Love',\n    'Wanda Wiggins',\n    'Deborah Park',\n    'Sheryl Lowery',\n    'Sheri Rose',\n    'Audrey Watkins',\n    'Angelica Lawrence',\n    'Megan Blevins',\n    'Angelo Barrett',\n    'Thomas Woods',\n    'Morris Britt',\n    'Alex Dean',\n    'Louis Freeman',\n    'Alfred Heath',\n    'Clifford Terrell',\n    'Calvin Buckley',\n    'Aaron Marshall',\n    'Giovanni Cash'\n];\n",
    "src/app/picklist-remote-data/picklist-remote-data-example.module.ts": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CashmereModule} from '../cashmere.module';\nimport {PicklistRemoteDataExampleComponent} from './picklist-remote-data-example.component';\nimport {PicklistRemoteDataService} from './picklist-remote-data.service';\nimport {FormsModule} from '@angular/forms';\n\n@NgModule({\n    imports: [CommonModule, FormsModule, CashmereModule],\n    declarations: [PicklistRemoteDataExampleComponent],\n    exports: [PicklistRemoteDataExampleComponent],\n    providers: [PicklistRemoteDataService]\n})\nexport class PicklistRemoteDataExampleModule {}\n",
    "src/app/picklist-remote-data/picklist-remote-data-example.component.ts": "import {Component, OnInit, ViewChild} from '@angular/core';\nimport {concat, Observable, of, Subject} from 'rxjs';\nimport {PicklistRemoteDataService, Person} from './picklist-remote-data.service';\nimport {catchError, distinctUntilChanged, switchMap, tap} from 'rxjs/operators';\nimport {PicklistComponent} from '@healthcatalyst/cashmere';\n\n@Component({\n    selector: 'hc-picklist-remote-data-example',\n    templateUrl: './picklist-remote-data-example.component.html',\n    standalone: false\n})\nexport class PicklistRemoteDataExampleComponent implements OnInit {\n    @ViewChild(PicklistComponent) picklist: PicklistComponent;\n    people$: Observable<Person[]>;\n    peopleLoading = true;\n    peopleInput$ = new Subject<string>();\n    selectedPersons: Person[] = [];\n    remoteCount = 125;\n    // using .bind() to maintain a scope that allows me access to the dataService in a callback function\n    addCustomItemFn = this.addCustomItem.bind(this);\n\n    constructor(public dataService: PicklistRemoteDataService) {}\n\n    ngOnInit(): void {\n        this.loadPeople();\n    }\n\n    trackByFn(item: Person): string {\n        return item.id;\n    }\n\n    addCustomItem(term: string): Person {\n        const customItem = {\n            id: `1234-${term}`,\n            age: Math.floor(Math.random() * 40) + 18,\n            name: term\n        };\n        this.dataService.mockPeople.push(customItem);\n        return customItem;\n    }\n\n    onChange(): void {\n        this.remoteCount = this.dataService.mockPeople.length - this.selectedPersons.length;\n        if (this.picklist.leftPaneIsEmpty && this.remoteCount > 0) {\n            this.peopleLoading = true;\n            this.loadPeople();\n        }\n    }\n\n    private loadPeople() {\n        this.people$ = concat(\n            of([]), // default items\n            this.peopleInput$.pipe(\n                distinctUntilChanged(),\n                tap(() => (this.peopleLoading = true)),\n                switchMap(term =>\n                    this.dataService.getPeople(term, this.selectedPersons).pipe(\n                        catchError(() => of([])), // empty list on error\n                        tap(() => {\n                            this.peopleLoading = false;\n                        })\n                    )\n                )\n            )\n        );\n    }\n}\n",
    "src/app/picklist-remote-data/picklist-remote-data-example.component.html": "<p>\n    For cases with very large numbers of available options, you connect the picklist to a remote data source and take advantage of virtual\n    scrolling.\n</p>\n<br />\n\n<hc-picklist\n    [items]=\"people$ | async\"\n    bindLabel=\"name\"\n    [addCustomItem]=\"addCustomItemFn\"\n    [trackByFn]=\"trackByFn\"\n    [leftPaneLoading]=\"peopleLoading\"\n    searchPlaceholder=\"Search by name\"\n    [externalSearchSubject]=\"peopleInput$\"\n    [externalTotalOptionCount]=\"remoteCount\"\n    [virtualScroll]=\"true\"\n    [(ngModel)]=\"selectedPersons\"\n    (change)=\"onChange()\"\n></hc-picklist>\n\n<br />\n<p>\n    Selected:\n    <code>{{ selectedPersons | json }}</code>\n</p>\n"
}
